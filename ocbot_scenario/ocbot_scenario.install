<?php

/**
 * @file
 * Install, update and uninstall functions for the ocbot_scenario module.
 */

use Drupal\ocbot_scenario\Install\ContentTypeInstaller;
use Drupal\ocbot_scenario\Install\FieldInstaller;
use Drupal\ocbot_scenario\Install\FormDisplayInstaller;
use Drupal\ocbot_scenario\Install\ParagraphsInstaller;

/**
 * Implements hook_install().
 */
function ocbot_scenario_install() {
  // 1. Create content type
  \Drupal::logger('ocbot_scenario')->notice('Creating content type...');
  ContentTypeInstaller::install();

  // 2. Create paragraphs
  \Drupal::logger('ocbot_scenario')->notice('Creating paragraphs...');
  ParagraphsInstaller::install();

  // 3. Add fields with dependency check
  \Drupal::logger('ocbot_scenario')->notice('Adding fields...');
  FieldInstaller::install();

  // 4. Force form display configuration
  \Drupal::logger('ocbot_scenario')->notice('Configuring form display...');
  
  // Clear any existing form display configuration
  try {
    $config = \Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.ocbot_scenario.default');
    if ($config) {
      $config->delete();
    }
  } catch (\Exception $e) {
    \Drupal::logger('ocbot_scenario')->error('Error deleting old form display: @error', ['@error' => $e->getMessage()]);
  }

  // Create new form display
  FormDisplayInstaller::setupFormDisplay('ocbot_scenario');

  // 5. Final cache clear
  \Drupal::logger('ocbot_scenario')->notice('Flushing caches...');
  drupal_flush_all_caches();

  \Drupal::logger('ocbot_scenario')->notice('Installation completed successfully.');
}

/**
 * Implements hook_uninstall().
 */
function ocbot_scenario_uninstall() {
  // Clean up configurations
  \Drupal::configFactory()->getEditable('core.entity_form_display.node.ocbot_scenario.default')->delete();
  
  // Clear field definitions cache
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
  
  drupal_flush_all_caches();
}

/**
 * Implements hook_requirements().
 */
function ocbot_scenario_requirements($phase) {
  $requirements = [];
  
  if ($phase == 'install') {
    // Check if required modules are enabled
    $required_modules = [
      'node',
      'field',
      'text',
      'options',
      'paragraphs'
    ];
    
    foreach ($required_modules as $module) {
      if (!\Drupal::moduleHandler()->moduleExists($module)) {
        $requirements["ocbot_scenario_$module"] = [
          'title' => t('Dependency missing'),
          'value' => t('@module module is required', ['@module' => $module]),
          'severity' => REQUIREMENT_ERROR,
        ];
      }
    }
  }
  
  return $requirements;
}